const getUserDetails = async (e) => {
    e.preventDefault(); // Prevent the default form submission

    try {
      // Send the data to the backend
      const response = await axios.post("http://localhost:5000/Api/SignUp", {
        fullName,
        Email,
        password
      });
      console.log(response.data); // Optional: Log the server response
    } catch (error) {
      console.log("Failed to post: ", error.message); // Handle the error
    }
  };

  import { useState, useEffect } from "react";
import axios from "axios";
import { FaUser } from "react-icons/fa";

const Home = () => {
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [gender, setGender] = useState("");
  const [location, setLocation] = useState("");
  const [academic, setAcademic] = useState("");
  const [company1, setCompany1] = useState("");
  const [company2, setCompany2] = useState("");
  const [company3, setCompany3] = useState("");
  const [salaryInfo, setSalaryInfo] = useState("");
  const [specialization, setSpecialization] = useState("");
  const [cv, setCv] = useState(null);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  const [showPopup, setShowPopup] = useState(false);
  const [cvSubmitted, setCvSubmitted] = useState(false); // Track if CV has been submitted
  const [user, setUser] = useState(null); // Store logged-in user info (name & profile picture)

  useEffect(() => {
    // Simulate fetching user data (replace with actual API call)
    const fetchUserData = async () => {
      const response = await axios.get("http://localhost:5000/Api/users"); // Example user endpoint
      setUser(response.data);
    };

    fetchUserData();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const formData = new FormData();
      formData.append("firstName", firstName);
      formData.append("lastName", lastName);
      formData.append("gender", gender);
      formData.append("location", location);
      formData.append("academic", academic);
      formData.append("company1", company1);
      formData.append("company2", company2);
      formData.append("company3", company3);
      formData.append("salaryInfo", salaryInfo);
      formData.append("specialization", specialization);
      formData.append("cv", cv); // Append CV file

      const response = await axios.post("http://localhost:5000/Api/users", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      setMessage(response.data.message);
      setError("");
      setCvSubmitted(true); // Mark that CV has been submitted

      // Clear form fields except CV
      setFirstName("");
      setLastName("");
      setGender("");
      setLocation("");
      setAcademic("");
      setCompany1("");
      setCompany2("");
      setCompany3("");
      setSalaryInfo("");
      setSpecialization("");

      setShowPopup(true); // Show success popup

      // Automatically hide popup after 3 seconds
      setTimeout(() => {
        setShowPopup(false);
      }, 3000);
    } catch (err) {
      setError(err.response?.data?.message || "Error submitting form");
      setMessage("");
    }
  };

  const handleCvUpdate = async (e) => {
    e.preventDefault();

    try {
      const formData = new FormData();
      formData.append("cv", cv); // Append updated CV file

      const response = await axios.put("http://localhost:5000/Api/users/update-cv", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      setMessage("CV successfully updated!");
      setError("");
      setShowPopup(true); // Show success popup

      // Automatically hide popup after 3 seconds
      setTimeout(() => {
        setShowPopup(false);
      }, 3000);
    } catch (err) {
      setError(err.response?.data?.message || "Error updating CV");
      setMessage("");
    }
  };

  return (
    <div className="h-fit-content flex items-center justify-center flex-col">
      {/* Success/Error Popup */}
      {showPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg text-center">
            <h3 className="text-xl font-bold text-green-500">
              {cvSubmitted ? "CV Successfully Updated!" : "Successfully Registered!"}
            </h3>
            <p className="text-gray-700 mt-2">
              {cvSubmitted
                ? "Your CV has been successfully updated."
                : "Your details have been successfully submitted."}
            </p>
          </div>
        </div>
      )}

      {/* Profile Section */}
      <div className="w-[100%] h-[20vh] bg-black text-white flex items-center justify-center mb-[10px] flex-col">
        <div className="w-[5%] h-[10vh] bg-white rounded-full flex items-center justify-center overflow-hidden">
          {user?.profilePicture ? (
            <img src={user.profilePicture} alt="User Profile" className="w-full h-full object-cover" />
          ) : (
            <FaUser className="text-blue-500 text-4xl" />
          )}
        </div>
        <div>
          <h5 className="text-white">{user?.name || "Username"}</h5>
        </div>
      </div>

      {/* Form Section */}
      <div className="shadow-lg rounded-lg w-full max-w-4xl flex items-stretch justify-center ">
        <div className="flex-grow">
          <h2 className="text-2xl font-semibold text-center p-1">Submit Your Details</h2>
          {/* Registration Form */}
          <form onSubmit={handleSubmit} className="bg-blue-800 rounded-lg p-8 text-white space-y-4 flex flex-row items-center justify-around shadow-lg">
            <div className="w-[45%]">
              <div className="flex flex-col">
                <label className="mb-1">First Name:</label>
                <input
                  type="text"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  required
                  className="p-2 rounded-lg border border-gray-300 text-black w-full"
                />
              </div>

              <div className="flex flex-col">
                <label className="mb-1">Last Name:</label>
                <input
                  type="text"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                  required
                  className="p-2 rounded-lg border border-gray-300 text-black"
                />
              </div>

              <div className="flex flex-col">
                <label className="mb-1">Gender:</label>
                <input
                  type="text"
                  value={gender}
                  onChange={(e) => setGender(e.target.value)}
                  required
                  className="p-2 rounded-lg border border-gray-300 text-black"
                />
              </div>

              <div className="flex flex-col">
                <label className="mb-1">Location:</label>
                <input
                  type="text"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  required
                  className="p-2 rounded-lg border border-gray-300 text-black"
                />
              </div>

              <div className="flex flex-col">
                <label className="mb-1">Academic Qualification:</label>
                <select
                  value={academic}
                  onChange={(e) => setAcademic(e.target.value)}
                  required
                  className="p-2 rounded-lg border border-gray-300 text-black"
                >
                  <option value="">Select your qualification</option>
                  <option value="Masters">Master</option>
                  <option value="Degree">Degree</option>
                  <option value="Diploma">Diploma</option>
                  <option value="Certificate">Certificate</option>
                </select>
              </div>

              <div className="flex flex-col">
                <label className="mb-1">Specialization:</label>
                <input
                  type="text"
                  value={specialization}
                  onChange={(e) => setSpecialization(e.target.value)}
                  required
                  className="p-2 rounded-lg border border-gray-300 text-black"
                />
              </div>
            </div>

            <div className="w-[45%]">
              <div className="flex flex-col">
                <label className="mb-1">Work Experience (Company 1):</label>
                <input
                  type="text"
                  value={company1}
                  onChange={(e) => setCompany1(e.target.value)}
                  required
                  className="p-2 rounded-lg border border-gray-300 text-black"
                />
              </div>

              <div className="flex flex-col">
                <label className="mb-1">Work Experience (Company 2):</label>
                <input
                  type="text"
                  value={company2}
                  onChange={(e) => setCompany2(e.target.value)}
                  className="p-2 rounded-lg border border-gray-300 text-black"
                />
              </div>

              <div className="flex flex-col">
                <label className="mb-1">Work Experience (Company 3):</label>
                <input
                  type="text"
                  value={company3}
                  onChange={(e) => setCompany3(e.target.value)}
                  className="p-2 rounded-lg border border-gray-300 text-black"
                />
              </div>

              <div className="flex flex-col">
                <label className="mb-1">Salary Information:</label>
                <input
                  type="text"
                  value={salaryInfo}
                  onChange={(e) => setSalaryInfo(e.target.value)}
                  className="p-2 rounded-lg border border-gray-300 text-black"
                />
              </div>

              <div className="flex flex-col">
                <label className="mb-1">Upload CV:</label>
                <input
                  type="file"
                  onChange={(e) => setCv(e.target.files[0])}
                  className="p-2 rounded-lg border border-gray-300 text-black"
                />
              </div>

              <div className="flex items-center justify-center mt-4">
                <button
                  type="submit"
                  className="bg-orange-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg"
                >
                  Submit
                </button>
              </div>
            </div>
          </form>

          {/* CV Update Section */}
          {cvSubmitted && (
            <div className="mt-8">
              <h3 className="text-xl font-bold text-center">Update Your CV</h3>
              <form onSubmit={handleCvUpdate} className="bg-blue-600 rounded-lg p-8 text-white space-y-4">
                <div className="flex flex-col">
                  <label className="mb-1">Upload Updated CV:</label>
                  <input
                    type="file"
                    onChange={(e) => setCv(e.target.files[0])}
                    className="p-2 rounded-lg border border-gray-300 text-black"
                  />
                </div>

                <div className="flex items-center justify-center mt-4">
                  <button
                    type="submit"
                    className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg"
                  >
                    Update CV
                  </button>
                </div>
              </form>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Home;
const handleCvUpdate = async (e) => {
    e.preventDefault();

    try {
      const formData = new FormData();
      formData.append("cv", cv); // Append updated CV file

      const response = await axios.put("http://localhost:5000/Api/users/${userId}/cv", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      setMessage("CV successfully updated!");
      setError("");
      setShowPopup(true); 

      // Automatically hide popup after 3 seconds
      setTimeout(() => {
        setShowPopup(false);
      }, 3000);

    } catch (err) {
      setError(err.response?.data?.message || "Error updating CV");
      setMessage("");
    }
  };


/* Initially hide images */
.hidden-on-hover {
  opacity: 0;
  z-index: -3;
  transition: opacity 1.5s ease, transform 1.5s ease;
}

/* Keyframes for slide-in and rotate animation */
@keyframes slideInRotate {
  0% {
    transform: rotate(80deg) scale(0.7); /* Offscreen and small */
    opacity: 0;
  }
  40% {
    transform: rotate(180deg) scale(1.5); /* Slide in, rotate, and zoom */
    opacity: 1;
  }
  100% {
    transform: rotate(360deg) scale(2); /* Final state */
    opacity: 1;
  }
}

/* Keyframes for slide-out and rotate back */
@keyframes slideOutRotate {
  0% {
    transform: rotate(360deg) scale(2);
    opacity: 1;
  }
  100% {
    transform: rotate(-360deg) scale(0.7);
    opacity: 0;
  }
}

/* Rotate clockwise and zoom in on hover */
.rotate-hover:hover ~ .login-image img,
.rotate-hover:hover ~ .signup-image img {
  z-index: 1;
  opacity: 1;
  animation: slideInRotate 1.5s ease-in-out forwards; /* Smooth in */
  cursor: pointer;
}

/* Rotate anticlockwise and shrink on hover out (button hover out, not image) */
.rotate-hover:hover ~ .login-image img.hidden-on-hover,
.rotate-hover:hover ~ .signup-image img.hidden-on-hover {
  animation: slideOutRotate 1.5s ease-in-out forwards; /* Smooth out */
  opacity: 0; /* Gradually disappear */
  transition: opacity 0.5s ease-in-out; /* Control opacity separately */
}

/* Ensure image stays visible after hover */
.rotate-hover:hover ~ .login-image img,
.rotate-hover:hover ~ .signup-image img {
  animation-fill-mode: forwards; /* Maintain final state */
}
